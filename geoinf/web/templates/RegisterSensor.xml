<?xml version="1.0" encoding="UTF-8"?>
<RegisterSensor service="SOS" version="1.0.0"
 xmlns="http://www.opengis.net/sos/1.0"
 xmlns:sa="http://www.opengis.net/sampling/1.0"
 xmlns:swe="http://www.opengis.net/swe/1.0.1"
 xmlns:ows="http://www.opengeospatial.net/ows"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:om="http://www.opengis.net/om/1.0"
 xmlns:sml="http://www.opengis.net/sensorML/1.0.1"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.opengis.net/sos/1.0
http://schemas.opengis.net/sos/1.0.0/sosRegisterSensor.xsd http://www.opengis.net/om/1.0 http://schemas.opengis.net/om/1.0.0/extensions/observationSpecialization_override.xsd">

 <!-- Sensor Description parameter; Currently, this has to be a sml:System -->
 <SensorDescription>
  <sml:SensorML version="1.0.1">
   <sml:member>
    <sml:System xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

     <!--sml:identification element must contain the ID of the sensor-->
     <sml:identification>
      <sml:IdentifierList>
       <sml:identifier>
        <sml:Term definition="urn:ogc:def:identifier:OGC:uniqueID">
         <sml:value>{{ sensor.ID }}</sml:value>
        </sml:Term>
       </sml:identifier>
      </sml:IdentifierList>
     </sml:identification>

     <!-- sml:capabilities has to contain status and mobility information -->
     <sml:capabilities>
      <swe:SimpleDataRecord>
       <!-- status: sensor is collecting data at the moment (true) or not (false) -->
       <swe:field name="status">
        <swe:Boolean>
         <swe:value>{{ sensor.status|default('true') }}</swe:value>
        </swe:Boolean>
       </swe:field>
       <!-- status whether sensor is mobile (true) or fixed (false) -->
       <swe:field name="mobile">
        <swe:Boolean>
         <swe:value>{{ sensor.mobile|default('false') }}</swe:value>
        </swe:Boolean>
        </swe:field>
      </swe:SimpleDataRecord>
     </sml:capabilities>

     {% if sensor.latitude and sensor.longitude %}{# sos error if no pos #}{% endif %}
     <!-- last measured position of sensor -->
     <sml:position name="sensorPosition">
      <swe:Position referenceFrame="{{ sensor.srs|default('urn:ogc:def:crs:EPSG::4326') }}">
       <swe:location>
        <swe:Vector gml:id="STATION_LOCATION">
         <swe:coordinate name="latitude">
          <swe:Quantity>
           <swe:uom code="{{ coords.uom|default('decimals_degrees') }}" />
           <swe:value>{{ sensor.latitude|default('0.0') }}</swe:value>
          </swe:Quantity>
         </swe:coordinate>
         <swe:coordinate name="longitude">
          <swe:Quantity>
           <swe:uom code="{{ coords.uom|default('decimals_degrees') }}" />
           <swe:value>{{ sensor.longitude|default('0.0') }}</swe:value>
          </swe:Quantity>
         </swe:coordinate>
         {% if sensor.altitude %}
         <swe:coordinate name="altitude">
          <swe:Quantity>
           <swe:uom code="{{ coords.uom|default('m') }}" />
           <swe:value>{{ sensor.altitude }}</swe:value>
          </swe:Quantity>
         </swe:coordinate>
         {% endif %}
         </swe:Vector>
       </swe:location>
      </swe:Position>
     </sml:position>

     <!-- list containing the input phenomena for this sensor system
     <sml:inputs>
      <sml:InputList>
      </sml:InputList>
     </sml:inputs>-->

     <!-- list containing the output phenomena of this sensor system;
      ATTENTION:
      These phenomena are parsed and inserted into the database; they have to
      contain offering elements to determine the correct offering for the sensors
       and measured phenomena
       NB: Ordering of gml elements IS important! -->
     <sml:outputs>
      <sml:OutputList>
      {% for item in components %} <sml:output name="{{ item.name }}">
        <swe:{{ item.type }} definition="{{ item.urn }}">
         <gml:metaDataProperty>
          <offering>
           <id>{{ offering.ID|default('SOS') }}</id>
           <name>{{ offering.name|truncate(length=99, end='')|default('Sensor Offering') }}</name>
          </offering>
         </gml:metaDataProperty>
         <gml:description>{{ item.name|truncate(length=199, end='') }}</gml:description>
        {% if item.units %}  <swe:uom code="{{ item.units }}" />{% endif %}<!-- -->
        </swe:{{ item.type }}>
       </sml:output>
      {% endfor %}</sml:OutputList>
     </sml:outputs>

    </sml:System>
   </sml:member>
  </sml:SensorML>
 </SensorDescription>


 <!-- ObservationTemplate parameter; this has to be an empty measurement
  or category at the moment, as the 52N SOS only supports Measurements or
  CategoryObservations to be inserted -->
 <ObservationTemplate>
  <om:Observation>
   <om:samplingTime />
   <om:procedure />
   <om:observedProperty />
   <om:featureOfInterest>
   {% if foi %}
    {% if foi|length() == 1 %}
    {% for feature in foi %}
    <sa:SamplingPoint gml:id="{{ feature.id }}">
     <gml:name>{{ feature.name|safe|truncate(length=99, end='') }}</gml:name>
     <gml:description>{{ feature.name|safe }}</gml:description>
     <sa:position>
      <gml:Point>
       <gml:pos srsName="{{ feature.srs|default('urn:ogc:def:crs:EPSG::4326') }}">
        {% if feature.coords is iterable %}{% for coord in feature.coords %}{{ coord.0 }} {{ coord.1 }} {% endfor %}{% endif %}
       </gml:pos>
      </gml:Point>
     </sa:position>
    </sa:SamplingPoint>
    {% endfor %}
    {% elif foi|length() > 1 %}
    <gml:FeatureCollection>
     {% for feature in foi %}
     <gml:featureMember>
      <sa:SamplingPoint gml:id="{{ feature.id }}">
       <gml:name>{{ feature.name|safe|truncate(length=99, end='') }}</gml:name>
       <gml:description>{{ feature.name|safe }}</gml:description>
       <sa:position>
        <gml:Point>
         <gml:pos srsName="{{ feature.srs|default('urn:ogc:def:crs:EPSG::4326') }}">
          {% if feature.coords is iterable %}{% for coord in feature.coords %}{{ coord.0 }} {{ coord.1 }} {% endfor %}{% endif %}
         </gml:pos>
        </gml:Point>
       </sa:position>
      </sa:SamplingPoint>
     </gml:featureMember>
     {% endfor %}
    </gml:FeatureCollection>
    {% endif %}
   {% endif %}
   </om:featureOfInterest>
   <om:result />
  </om:Observation>
 </ObservationTemplate>

</RegisterSensor>
